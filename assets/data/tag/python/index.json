{"hash":"e8565e8844112dffa580422ad9b2733596cc9840","data":{"tag":{"title":"python","belongsTo":{"edges":[{"node":{"title":"Convert sync code to async in python","path":"/convert-sync-code-to-async-in-python/","date":"12. December 2023","timeToRead":2,"description":"Asynchronous programming has become increasingly popular in recent years, as it allows you to write code that can perform multiple tasks concurrently.","coverImage":{"type":"image","mimeType":"image/webp","src":"/blog/assets/static/asyncio.07cc2b7.c2a4792af2020212327b44e52a6fe3f7.webp","size":{"width":860,"height":328},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/blog/assets/static/asyncio.a67b0b2.c2a4792af2020212327b44e52a6fe3f7.webp 480w","/blog/assets/static/asyncio.07cc2b7.c2a4792af2020212327b44e52a6fe3f7.webp 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 328' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b8150a768b39512b039f381255233a66'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b8150a768b39512b039f381255233a66)' width='860' height='328' xlink:href='data:image/webp%3bbase64%2cUklGRtAAAABXRUJQVlA4IMQAAABwBgCdASpAABgAPm0ylUekIqIhpAtogA2JQBgiuB8ANAAmf4eQqELO%2bIwWJ7pN2HvtNexojDH2yTkFaAAA/HsU9d8yOT%2b3/k%2byvusvB3oq0PH6yzqrjJwJmV2q3o7kQeJbVgNOz9fyLJYCFaVD9GiLVB4gc1NmSVxL3EaFzlBT5FbYm53r3JvZNrzygpPA5pQRsTps8b7XRsxW3/LZ/iUOW%2bCrv1gPnb/pyCKXCkBhRKWh%2bWmlZ4E703W8Yh5iaYgVwfAA' /%3e%3c/svg%3e"},"content":"<h2 id=\"intorduction\"><a href=\"#intorduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Intorduction</h2>\n<p>Asynchronous programming has become increasingly popular in recent years, as it allows you to write code that can perform multiple tasks concurrently. This can be especially useful when working with tasks that involve waiting for a response, such as making HTTP requests or accessing a database.</p>\n<p>In Python, you can write asynchronous code using the asyncio module and the async/await syntax. In this post, we'll go over how to convert sync code to async in Python and some best practices to follow when writing async code.</p>\n<h3 id=\"identify-blocking-code\"><a href=\"#identify-blocking-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Identify blocking code</h3>\n<p>The first step in converting sync code to async is to identify the code that is blocking the main thread and causing it to wait for a response. This can include things like making HTTP requests, reading and writing to databases, or accessing the file system.</p>\n<p>For example, consider the following sync code that makes an HTTP request using the requests library:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/api/endpoint\"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data</code></pre></div>\n<p>This code will block the main thread until the HTTP request has completed and the response has been received. To convert this code to async, we'll need to use an async library like aiohttp instead of the sync requests library.\nbut if there is no alternatives, (and this the reason why i am writing this post), you can use asyncio to convert for example a third party library to be async lets say we want to run the above code multiple times, with it current form it surly will wait until the first run end and move to the next, to overcome this we can make the following changes:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> asyncio\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/api/endpoint\"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#get the current running event loop</span>\n    loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#list to store pending coroutines </span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#pass the target function to the executer, and its params if available </span>\n        results<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">.</span>run_in_executor<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>get_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#here is the blocking part where we wait for all pending results</span>\n    results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    asyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-inline-text\">loop.run_in_executor</code> is a method provided by the asyncio module in Python that allows you to run a function concurrently in a separate thread or process. It's commonly used to run sync code concurrently with async code, as sync code can block the event loop and prevent other async tasks from running.</p>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h3>\n<p>Converting sync code to async in Python can be a challenging task, but the benefits of async programming make it well worth the effort. By using the asyncio module and async libraries, and following best practices like avoiding sync code and thoroughly testing your code, you can write efficient, concurrent Python code that can scale to handle high levels of traffic and workload.</p>\n"}},{"node":{"title":"Dynamic number of threads in celery","path":"/dynamic-number-of-threads-in-celery/","date":"2. August 2022","timeToRead":1,"description":"I guess this a followup to the previous post, where i talked about celery and some..","coverImage":{"type":"image","mimeType":"image/png","src":"/blog/assets/static/celery.07cc2b7.1e7fb99de7f67fa327e67d073f7413d6.png","size":{"width":860,"height":484},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/blog/assets/static/celery.a67b0b2.1e7fb99de7f67fa327e67d073f7413d6.png 480w","/blog/assets/static/celery.07cc2b7.1e7fb99de7f67fa327e67d073f7413d6.png 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 484' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-03f66e9a6f669f40b4ca1ff10ab76be5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-03f66e9a6f669f40b4ca1ff10ab76be5)' width='860' height='484' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAIAAAC2bqvFAAAACXBIWXMAAAsSAAALEgHS3X78AAAD6klEQVRYw9XS2W8bRRwH8PmLeOKJJ5544qFACCBB6cElVBUhnIQc5Kqd2F6vj/XazuXYTuqriWmTJlg5gNICXXvt9dpe37trJ3EbktjxUbdpC1KYNlULgjhrqS8jfbSa%2bY3mN9%2bftIBvzCANZOoOpIFkzY40EKvakQYi%2bzakAbo0jTRwe8%2bKNHBrZwpp4OftSaSB1TsTSAM/FMeRBhY2x5AG5gvml8oiVf7lvAjcgqkFotkrjsHvf45Il2B2CRYpHZw84eIJp2By8S%2bKHtECuQTT0cItmCVGAjM5sgW82ZYloH/XjY4cjKW5KnQuCl81tyBcXN8aCpUn2Yrjimi2Z42zOdKRM9qyBkeO9IhT01k97O%2bQHAlYM0YppjPkWApf3vRFysHZ3Pg/joipjGk2p14WP/Pnz/rFc8c7vyycvr3du/nAWbjvTFRnPIJ5Mm2cTBtsWbN/62qqEktXOaYUmMtftmZIicHAWIqQbrNRODw8ZMuMJWV4XrSkCHf0vI9tm2c/mGffP85cpH2BOyM0HFxt1smT5icdjGQCv1aYu/e4Ru9R6WryjwfbyQpXeVRhS4wxgY%2bnjCdGAsaEQQoyQeg5rVgX4ACB3YA2jpkSBKwTCaOFU3rD7d5wmzf87nGuhNtd9KnV7NfFA4%2bvYMFiuqOeujjuEdzFRrHxZ6P2uFZ%2bWDr46yHc/nhnHT4nJRjQxvVS6DlilFX5t1bgAGI9r2CVeFynjes0cQPJqZZ4%2bHs098li7uNf7/YVD7we0ayIaOFdXdygimou8674Pkfv0plqlq8Jgd0gW46uFdexGC4lGFCxOomUrBaLGjbubcEZbty9KWfUsALBo%2b9zX/qFM0vCp01mWOLPruYv5O87mX0HwekvMbiS1SkYzJqe4WtitsZHSjF6l8lUc2K9cH3DPxLRqFn9iakAbCSRnNEOhTEsSjJ7sdqjerbK/75DT2ecQ4wWZwa9TLuPeXueeed4bd7QqVv5zuKBW3gyhs3AGQbDGtjZEJ%2b4vrHClrhkJbNW/MWStA0/rUsB%2bkMa6QZCeB%2bt7goo5Ayhj1s10fHhsL4/hPXR2hF6aIL%2b3E6ftoeasdEfLmS6qZ2JcNmOx/S9QWwgpOkJqjopuYIhVKylKzDSHRyFD0mMBLqDWEt6gvA9vCugllGjHZQSLo7qXbAYxHuDqpOov6UUPQFld1Dz/O6znhQcQwUXcCs9D/iGUrdKRqk7KOyI7EVRJaOUT7/NqTsCzy7K/q9tq2HAxd%2bUSANf3BxFGjh3YwRp4KOf5EgD761dQhp4a2UYaeBN/yDSwBvLA0gDry/2Iw28du07pIFXfb1IA6/M9SDtb7cMizY%2bH0Q1AAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"content":"<p>I guess this a followup to the <a href=\"https://almadih.github.io/blog/async-distributed-tasks-in-python-with-celery/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">previous post</a>, where i talked about celery and some pref and examples about it, i think this could be a series where i show the problems i faced during the project and how i overcome them.</p>\n<h2 id=\"the-problem\"><a href=\"#the-problem\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The problem</h2>\n<p>The project is running in multiple servers with different amount of resources, the mistake i did is running celery with fixed number of threads in all servers this cause smaller servers to hang since the receive huge number of tasks larger thant their resources.</p>\n<h2 id=\"the-solution\"><a href=\"#the-solution\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The solution</h2>\n<p>Solution is very simple i came up with an equation to calculate threads number based on amount of CPUs and Ram the server has. </p>\n<div class=\"gridsome-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\">#worker.sh</span>\n<span class=\"token assign-left variable\">cpus</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>nproc <span class=\"token parameter variable\">--all</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">ram</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">free</span> <span class=\"token parameter variable\">-g</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'/^Mem:/{print $2}'</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">threads</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>cpus<span class=\"token operator\">*</span><span class=\"token number\">15</span> <span class=\"token operator\">+</span> ram<span class=\"token operator\">*</span><span class=\"token number\">15</span><span class=\"token variable\">))</span></span>\n\ncelery <span class=\"token parameter variable\">-A</span> celery_app.tasks worker <span class=\"token parameter variable\">--loglevel</span><span class=\"token operator\">=</span>info <span class=\"token parameter variable\">--pool</span><span class=\"token operator\">=</span>threads <span class=\"token parameter variable\">-c</span> <span class=\"token variable\">$threads</span></code></pre></div>\n<p>the <code class=\"language-inline-text\">15</code> here is arbitrary number, of course this should be determined carefully based on tasks type and wight.  </p>\n"}},{"node":{"title":"Download Videos from twitter using telegram bot","path":"/download-videos-from-twitter-using-telegram-bot/","date":"27. May 2022","timeToRead":1,"description":"I normally don't like to download whole app just to do a simple thing, I tried to download a video from twitter...","coverImage":{"type":"image","mimeType":"image/jpeg","src":"/blog/assets/static/twitter.07cc2b7.b0b3f37f8f26d3b662d0e86833010e57.jpg","size":{"width":860,"height":450},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/blog/assets/static/twitter.a67b0b2.b0b3f37f8f26d3b662d0e86833010e57.jpg 480w","/blog/assets/static/twitter.07cc2b7.b0b3f37f8f26d3b662d0e86833010e57.jpg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 450' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-290a208e42e019b8a852438777b69d17'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-290a208e42e019b8a852438777b69d17)' width='860' height='450' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAhAEADASIAAhEBAxEB/8QAHAAAAQUBAQEAAAAAAAAAAAAAAAIEBQYHAwEI/8QALxAAAgEDAgMGBQUBAAAAAAAAAQIDAAQRBSEGEjETQVFhobEiMnFygSNEUlORwf/EABkBAAIDAQAAAAAAAAAAAAAAAAMEAAIFAf/EACMRAAEEAQIHAQAAAAAAAAAAAAEAAgMRBCExEhMUMkFhgaH/2gAMAwEAAhEDEQA/APoeuNzcwWqBrmaKFT0MjBc/7XYdazCxsbrjHWbmV762h5XICO3M6rnYKg3I861oYg%2b3ONALAyJnMIaxtuOy0uCeK4jEkEqSp/JGDD0r2zPKJIf622%2b07j/o/FUJ4F4T4ysNPs7iWYTIguQ%2bAGLkgYA6Y2PfV8PwXEb9zfpt7j196FlRANBabB1CPgzkvLXiiNCnNc554reIyXEqRRjqzsFA/JrpWearAeJuN59JuLk28cSMluD05wAc4787/ilsaATONmgBZTmblHGYC0W5xoD2r3Z31regm0uYZwvXs3DY/wApxWb69oC8GWmm30V/I2qs%2bGRAOzYDdvPHdv1z3Vo0bc8avjHMA2PDIq2RA2MB8Ztpv8VcPKfMXRyt4XNq9b3SKz3XuDNRj1OW%2b4enVO1JJj7Ts2Qnryt4eorQqi5dGjaTniubqE7kKkmFBJydqaimdEbakJYGTCneFAaBwzqL60NZ4kuVnvEACIpzuBgMxG2w8PrVxkTnjZehPQ%2bB7qYW%2bliJ0drq7kZcfNKcEjy86kRXJZHS6uVoomw6NS4n7SNW6ZG48DVa1/QLyTUhq2h3S219ygOGA5Xx0IJBwasMJ5ZXTx%2bMfnr6%2b9NhpcSrypNcKm/wq%2bAfSlYX8l5N18uwnsmPqIwOG/tEH0qnZ8KapqWqJe8SXYmCYPIH5ywG4G2yj6Ve6jV0iFABHNcoBj5ZMdM496kI0EaKijCqMCu5U/OIN7eKoBVwcbpwRw0Tubsn8SKKKKMlkUUUVFEj93F9je604oopOXuWlj9gRRRRQ0Zf/9k=' /%3e%3c/svg%3e"},"content":"<p>I normally don't like to download whole app just to do a simple thing, I tried to download a video from twitter first thing came in my mind is telegram, because there is a bot for everything, well i found one and it was unreliable. So i said let me make my own!.  </p>\n<h3 id=\"twitter-api\"><a href=\"#twitter-api\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Twitter API</h3>\n<p>The first problem came in my way is twitter api, to use it you must have developer account and to be honest i've applied because i have many ideas for twitter, but i got rejected and i haven't try again.\nI tried to find another way and luckily i found this <a href=\"https://github.com/Almadih/twitter-videos-downloader-bot.git\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repository</a> it use indirect way to access the api and it work like a charm.</p>\n<h3 id=\"deployment\"><a href=\"#deployment\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deployment</h3>\n<p>deploying a telegram bot was always a problem from me since it need to run always on a server (this before i discover the perfect situation to use webhooks), recently i activated my google cloud account and now i can try the power of serverless functions!.\nSo the structure of the project is Http-triggered cloud function which act as webhook for the bot, every time the bot receive a message the function called.  </p>\n<h3 id=\"code\"><a href=\"#code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Code</h3>\n<p>Here is the link to the <a href=\"https://github.com/Almadih/twitter-videos-downloader-bot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repository</a> you can find all technical stuff there.\nAnd here is the <a href=\"https://t.me/twitter_vid_dl_bot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bot</a> if you want to try .</p>\n"}},{"node":{"title":"Async Distributed tasks in python with Celery","path":"/async-distributed-tasks-in-python-with-celery/","date":"2. May 2022","timeToRead":2,"description":"I was working on a project where we need to collect data from domains, since...","coverImage":{"type":"image","mimeType":"image/png","src":"/blog/assets/static/celery.07cc2b7.1e7fb99de7f67fa327e67d073f7413d6.png","size":{"width":860,"height":484},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/blog/assets/static/celery.a67b0b2.1e7fb99de7f67fa327e67d073f7413d6.png 480w","/blog/assets/static/celery.07cc2b7.1e7fb99de7f67fa327e67d073f7413d6.png 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 484' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-03f66e9a6f669f40b4ca1ff10ab76be5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-03f66e9a6f669f40b4ca1ff10ab76be5)' width='860' height='484' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAIAAAC2bqvFAAAACXBIWXMAAAsSAAALEgHS3X78AAAD6klEQVRYw9XS2W8bRRwH8PmLeOKJJ5544qFACCBB6cElVBUhnIQc5Kqd2F6vj/XazuXYTuqriWmTJlg5gNICXXvt9dpe37trJ3EbktjxUbdpC1KYNlULgjhrqS8jfbSa%2bY3mN9%2bftIBvzCANZOoOpIFkzY40EKvakQYi%2bzakAbo0jTRwe8%2bKNHBrZwpp4OftSaSB1TsTSAM/FMeRBhY2x5AG5gvml8oiVf7lvAjcgqkFotkrjsHvf45Il2B2CRYpHZw84eIJp2By8S%2bKHtECuQTT0cItmCVGAjM5sgW82ZYloH/XjY4cjKW5KnQuCl81tyBcXN8aCpUn2Yrjimi2Z42zOdKRM9qyBkeO9IhT01k97O%2bQHAlYM0YppjPkWApf3vRFysHZ3Pg/joipjGk2p14WP/Pnz/rFc8c7vyycvr3du/nAWbjvTFRnPIJ5Mm2cTBtsWbN/62qqEktXOaYUmMtftmZIicHAWIqQbrNRODw8ZMuMJWV4XrSkCHf0vI9tm2c/mGffP85cpH2BOyM0HFxt1smT5icdjGQCv1aYu/e4Ru9R6WryjwfbyQpXeVRhS4wxgY%2bnjCdGAsaEQQoyQeg5rVgX4ACB3YA2jpkSBKwTCaOFU3rD7d5wmzf87nGuhNtd9KnV7NfFA4%2bvYMFiuqOeujjuEdzFRrHxZ6P2uFZ%2bWDr46yHc/nhnHT4nJRjQxvVS6DlilFX5t1bgAGI9r2CVeFynjes0cQPJqZZ4%2bHs098li7uNf7/YVD7we0ayIaOFdXdygimou8674Pkfv0plqlq8Jgd0gW46uFdexGC4lGFCxOomUrBaLGjbubcEZbty9KWfUsALBo%2b9zX/qFM0vCp01mWOLPruYv5O87mX0HwekvMbiS1SkYzJqe4WtitsZHSjF6l8lUc2K9cH3DPxLRqFn9iakAbCSRnNEOhTEsSjJ7sdqjerbK/75DT2ecQ4wWZwa9TLuPeXueeed4bd7QqVv5zuKBW3gyhs3AGQbDGtjZEJ%2b4vrHClrhkJbNW/MWStA0/rUsB%2bkMa6QZCeB%2bt7goo5Ayhj1s10fHhsL4/hPXR2hF6aIL%2b3E6ftoeasdEfLmS6qZ2JcNmOx/S9QWwgpOkJqjopuYIhVKylKzDSHRyFD0mMBLqDWEt6gvA9vCugllGjHZQSLo7qXbAYxHuDqpOov6UUPQFld1Dz/O6znhQcQwUXcCs9D/iGUrdKRqk7KOyI7EVRJaOUT7/NqTsCzy7K/q9tq2HAxd%2bUSANf3BxFGjh3YwRp4KOf5EgD761dQhp4a2UYaeBN/yDSwBvLA0gDry/2Iw28du07pIFXfb1IA6/M9SDtb7cMizY%2bH0Q1AAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"content":"<p>I was working on a project where we need to collect data from domains, since whe have thousands of domains and each domain require a number of tasks in order to collect the needed data, this isn't a job for one machine no matter how powerful it is, it's better to distribute the load between number of machines.</p>\n<h3 id=\"ray\"><a href=\"#ray\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ray</h3>\n<p><a href=\"https://www.ray.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ray</a> was the top candidate for this job, but unfortunately we faced so many issues with it and it never worked out as we want.</p>\n<h3 id=\"celery\"><a href=\"#celery\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Celery</h3>\n<p>A colleague suggested using <a href=\"https://docs.celeryq.dev/en/stable/getting-started/introduction.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Celery</a> it was designed to work and integrated with python web frameworks like django and flask, but hey i thing we could use it this way :). </p>\n<h4 id=\"getting-started\"><a href=\"#getting-started\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>getting started</h4>\n<p>let's work on scenario where we have a task the take 5 sec to complete</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> time<span class=\"token punctuation\">,</span>sleep\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntask<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"time taken: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> seconds\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>if we run this of course it will take 5 seconds, but what if we need to run this task on let's say 20 domains, let's see the output:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">time taken: 100 seconds</code></pre></div>\n<p>again nothing strange as we know in python unless we don't use threads the event loop will be blocked, if in a case we need to run this like a couple of time we could simply use threads, but we need to run this on a scale.</p>\n<p>Ok, let move on to celery, this a basic app with minimal configuration you probably should head to their docs.</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n<span class=\"token keyword\">from</span> celery <span class=\"token keyword\">import</span> Celery\n\napp <span class=\"token operator\">=</span> Celery<span class=\"token punctuation\">(</span>broker<span class=\"token operator\">=</span><span class=\"token string\">'redis://localhost:6379/0'</span><span class=\"token punctuation\">,</span> backend<span class=\"token operator\">=</span><span class=\"token string\">'redis://localhost:6379/0'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>task</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and now we start celery as worker using the command</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">celery -A index worker --loglevel=info --pool=threads -c 100</code></pre></div>\n<p>we should get something like this </p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[tasks]\n  . index.task\n\n[2022-05-02 23:09:16,403: INFO/MainProcess] Connected to redis://localhost:6379/0\n[2022-05-02 23:09:16,406: INFO/MainProcess] mingle: searching for neighbors\n[2022-05-02 23:09:17,417: INFO/MainProcess] mingle: all alone\n[2022-05-02 23:09:17,438: INFO/MainProcess] celery@pc ready.</code></pre></div>\n<p>now we have one worker ready to consume tasks, of course we need multiple worker or else we haven't done any thing spacial, i will run it two more times so the total number of workers is 3.\nto execute task on celery we call <code class=\"language-inline-text\">task.delay()</code> it return <code class=\"language-inline-text\">AsyncResult</code> object, we call <code class=\"language-inline-text\">get()</code> or <code class=\"language-inline-text\">wait()</code> on it to wait for its execution and get any return if it has. </p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> index <span class=\"token keyword\">import</span> task\n\nresults <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> result <span class=\"token keyword\">in</span> results<span class=\"token punctuation\">:</span>\n    result<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"time taken: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> seconds\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>in the above example we run the task 10 times which in the normal case should take 100 seconds, let see the improvement we made. </p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">time taken: 5 seconds</code></pre></div>\n<p>wow! from 100 to only just 5 seconds, of course this a simple example real life way complicated, but we get the idea.\nI know this not beginners friendly tutorial the goal is just to show case celery and what it can do. </p>\n"}}]}}},"context":{}}