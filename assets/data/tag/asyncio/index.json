{"hash":"f2ff6859b249e8bf155035fadbe8dc31b7d16c0f","data":{"tag":{"title":"asyncio","belongsTo":{"edges":[{"node":{"title":"Convert sync code to async in python","path":"/convert-sync-code-to-async-in-python/","date":"12. December 2023","timeToRead":2,"description":"Asynchronous programming has become increasingly popular in recent years, as it allows you to write code that can perform multiple tasks concurrently.","coverImage":{"type":"image","mimeType":"image/webp","src":"/assets/static/asyncio.07cc2b7.c2a4792af2020212327b44e52a6fe3f7.webp","size":{"width":860,"height":328},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/asyncio.a67b0b2.c2a4792af2020212327b44e52a6fe3f7.webp 480w","/assets/static/asyncio.07cc2b7.c2a4792af2020212327b44e52a6fe3f7.webp 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 328' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b8150a768b39512b039f381255233a66'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b8150a768b39512b039f381255233a66)' width='860' height='328' xlink:href='data:image/webp%3bbase64%2cUklGRtAAAABXRUJQVlA4IMQAAABwBgCdASpAABgAPm0ylUekIqIhpAtogA2JQBgiuB8ANAAmf4eQqELO%2bIwWJ7pN2HvtNexojDH2yTkFaAAA/HsU9d8yOT%2b3/k%2byvusvB3oq0PH6yzqrjJwJmV2q3o7kQeJbVgNOz9fyLJYCFaVD9GiLVB4gc1NmSVxL3EaFzlBT5FbYm53r3JvZNrzygpPA5pQRsTps8b7XRsxW3/LZ/iUOW%2bCrv1gPnb/pyCKXCkBhRKWh%2bWmlZ4E703W8Yh5iaYgVwfAA' /%3e%3c/svg%3e"},"content":"<h2 id=\"intorduction\"><a href=\"#intorduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Intorduction</h2>\n<p>Asynchronous programming has become increasingly popular in recent years, as it allows you to write code that can perform multiple tasks concurrently. This can be especially useful when working with tasks that involve waiting for a response, such as making HTTP requests or accessing a database.</p>\n<p>In Python, you can write asynchronous code using the asyncio module and the async/await syntax. In this post, we'll go over how to convert sync code to async in Python and some best practices to follow when writing async code.</p>\n<h3 id=\"identify-blocking-code\"><a href=\"#identify-blocking-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Identify blocking code</h3>\n<p>The first step in converting sync code to async is to identify the code that is blocking the main thread and causing it to wait for a response. This can include things like making HTTP requests, reading and writing to databases, or accessing the file system.</p>\n<p>For example, consider the following sync code that makes an HTTP request using the requests library:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/api/endpoint\"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data</code></pre></div>\n<p>This code will block the main thread until the HTTP request has completed and the response has been received. To convert this code to async, we'll need to use an async library like aiohttp instead of the sync requests library.\nbut if there is no alternatives, (and this the reason why i am writing this post), you can use asyncio to convert for example a third party library to be async lets say we want to run the above code multiple times, with it current form it surly will wait until the first run end and move to the next, to overcome this we can make the following changes:</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> asyncio\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/api/endpoint\"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#get the current running event loop</span>\n    loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#list to store pending coroutines </span>\n    results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#pass the target function to the executer, and its params if available </span>\n        results<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">.</span>run_in_executor<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>get_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">#here is the blocking part where we wait for all pending results</span>\n    results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>results<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    asyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-inline-text\">loop.run_in_executor</code> is a method provided by the asyncio module in Python that allows you to run a function concurrently in a separate thread or process. It's commonly used to run sync code concurrently with async code, as sync code can block the event loop and prevent other async tasks from running.</p>\n<h3 id=\"conclusion\"><a href=\"#conclusion\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusion</h3>\n<p>Converting sync code to async in Python can be a challenging task, but the benefits of async programming make it well worth the effort. By using the asyncio module and async libraries, and following best practices like avoiding sync code and thoroughly testing your code, you can write efficient, concurrent Python code that can scale to handle high levels of traffic and workload.</p>\n"}}]}}},"context":{}}