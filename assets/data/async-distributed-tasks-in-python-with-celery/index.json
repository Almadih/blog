{"hash":"33cba4920c19c25c8a4390379f4aca5e62df75b6","data":{"post":{"title":"Async Distributed tasks in python with Celery","path":"/async-distributed-tasks-in-python-with-celery/","date":"2. May 2022","timeToRead":2,"tags":[{"id":"python","title":"python","path":"/tag/python/"},{"id":"celery","title":"celery","path":"/tag/celery/"}],"description":"I was working on a project where we need to collect data from domains, since...","content":"<p>I was working on a project where we need to collect data from domains, since whe have thousands of domains and each domain require a number of tasks in order to collect the needed data, this isn't a job for one machine no matter how powerful it is, it's better to distribute the load between number of machines.</p>\n<h3 id=\"ray\"><a href=\"#ray\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ray</h3>\n<p><a href=\"https://www.ray.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ray</a> was the top candidate for this job, but unfortunately we faced so many issues with it and it never worked out as we want.</p>\n<h3 id=\"celery\"><a href=\"#celery\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Celery</h3>\n<p>A colleague suggested using <a href=\"https://docs.celeryq.dev/en/stable/getting-started/introduction.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Celery</a> it was designed to work and integrated with python web frameworks like django and flask, but hey i thing we could use it this way :). </p>\n<h4 id=\"getting-started\"><a href=\"#getting-started\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>getting started</h4>\n<p>let's work on scenario where we have a task the take 5 sec to complete</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> time<span class=\"token punctuation\">,</span>sleep\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntask<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"time taken: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> seconds\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>if we run this of course it will take 5 seconds, but what if we need to run this task on let's say 20 domains, let's see the output:</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">time taken: 100 seconds</code></pre></div>\n<p>again nothing strange as we know in python unless we don't use threads the event loop will be blocked, if in a case we need to run this like a couple of time we could simply use threads, but we need to run this on a scale.</p>\n<p>Ok, let move on to celery, this a basic app with minimal configuration you probably should head to their docs.</p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n<span class=\"token keyword\">from</span> celery <span class=\"token keyword\">import</span> Celery\n\napp <span class=\"token operator\">=</span> Celery<span class=\"token punctuation\">(</span>broker<span class=\"token operator\">=</span><span class=\"token string\">'redis://localhost:6379/0'</span><span class=\"token punctuation\">,</span> backend<span class=\"token operator\">=</span><span class=\"token string\">'redis://localhost:6379/0'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>task</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and now we start celery as worker using the command</p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">celery -A index worker --loglevel=info --pool=threads -c 100</code></pre></div>\n<p>we should get something like this </p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[tasks]\n  . index.task\n\n[2022-05-02 23:09:16,403: INFO/MainProcess] Connected to redis://localhost:6379/0\n[2022-05-02 23:09:16,406: INFO/MainProcess] mingle: searching for neighbors\n[2022-05-02 23:09:17,417: INFO/MainProcess] mingle: all alone\n[2022-05-02 23:09:17,438: INFO/MainProcess] celery@pc ready.</code></pre></div>\n<p>now we have one worker ready to consume tasks, of course we need multiple worker or else we haven't done any thing spacial, i will run it two more times so the total number of workers is 3.\nto execute task on celery we call <code class=\"language-inline-text\">task.delay()</code> it return <code class=\"language-inline-text\">AsyncResult</code> object, we call <code class=\"language-inline-text\">get()</code> or <code class=\"language-inline-text\">wait()</code> on it to wait for its execution and get any return if it has. </p>\n<div class=\"gridsome-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> index <span class=\"token keyword\">import</span> task\n\nresults <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    results<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> result <span class=\"token keyword\">in</span> results<span class=\"token punctuation\">:</span>\n    result<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"time taken: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> seconds\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>in the above example we run the task 10 times which in the normal case should take 100 seconds, let see the improvement we made. </p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">time taken: 5 seconds</code></pre></div>\n<p>wow! from 100 to only just 5 seconds, of course this a simple example real life way complicated, but we get the idea.\nI know this not beginners friendly tutorial the goal is just to show case celery and what it can do. </p>\n","coverImage":{"type":"image","mimeType":"image/png","src":"/blog/assets/static/celery.07cc2b7.1e7fb99de7f67fa327e67d073f7413d6.png","size":{"width":860,"height":484},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/blog/assets/static/celery.a67b0b2.1e7fb99de7f67fa327e67d073f7413d6.png 480w","/blog/assets/static/celery.07cc2b7.1e7fb99de7f67fa327e67d073f7413d6.png 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 484' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-03f66e9a6f669f40b4ca1ff10ab76be5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-03f66e9a6f669f40b4ca1ff10ab76be5)' width='860' height='484' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAIAAAC2bqvFAAAACXBIWXMAAAsSAAALEgHS3X78AAAD6klEQVRYw9XS2W8bRRwH8PmLeOKJJ5544qFACCBB6cElVBUhnIQc5Kqd2F6vj/XazuXYTuqriWmTJlg5gNICXXvt9dpe37trJ3EbktjxUbdpC1KYNlULgjhrqS8jfbSa%2bY3mN9%2bftIBvzCANZOoOpIFkzY40EKvakQYi%2bzakAbo0jTRwe8%2bKNHBrZwpp4OftSaSB1TsTSAM/FMeRBhY2x5AG5gvml8oiVf7lvAjcgqkFotkrjsHvf45Il2B2CRYpHZw84eIJp2By8S%2bKHtECuQTT0cItmCVGAjM5sgW82ZYloH/XjY4cjKW5KnQuCl81tyBcXN8aCpUn2Yrjimi2Z42zOdKRM9qyBkeO9IhT01k97O%2bQHAlYM0YppjPkWApf3vRFysHZ3Pg/joipjGk2p14WP/Pnz/rFc8c7vyycvr3du/nAWbjvTFRnPIJ5Mm2cTBtsWbN/62qqEktXOaYUmMtftmZIicHAWIqQbrNRODw8ZMuMJWV4XrSkCHf0vI9tm2c/mGffP85cpH2BOyM0HFxt1smT5icdjGQCv1aYu/e4Ru9R6WryjwfbyQpXeVRhS4wxgY%2bnjCdGAsaEQQoyQeg5rVgX4ACB3YA2jpkSBKwTCaOFU3rD7d5wmzf87nGuhNtd9KnV7NfFA4%2bvYMFiuqOeujjuEdzFRrHxZ6P2uFZ%2bWDr46yHc/nhnHT4nJRjQxvVS6DlilFX5t1bgAGI9r2CVeFynjes0cQPJqZZ4%2bHs098li7uNf7/YVD7we0ayIaOFdXdygimou8674Pkfv0plqlq8Jgd0gW46uFdexGC4lGFCxOomUrBaLGjbubcEZbty9KWfUsALBo%2b9zX/qFM0vCp01mWOLPruYv5O87mX0HwekvMbiS1SkYzJqe4WtitsZHSjF6l8lUc2K9cH3DPxLRqFn9iakAbCSRnNEOhTEsSjJ7sdqjerbK/75DT2ecQ4wWZwa9TLuPeXueeed4bd7QqVv5zuKBW3gyhs3AGQbDGtjZEJ%2b4vrHClrhkJbNW/MWStA0/rUsB%2bkMa6QZCeB%2bt7goo5Ayhj1s10fHhsL4/hPXR2hF6aIL%2b3E6ftoeasdEfLmS6qZ2JcNmOx/S9QWwgpOkJqjopuYIhVKylKzDSHRyFD0mMBLqDWEt6gvA9vCugllGjHZQSLo7qXbAYxHuDqpOov6UUPQFld1Dz/O6znhQcQwUXcCs9D/iGUrdKRqk7KOyI7EVRJaOUT7/NqTsCzy7K/q9tq2HAxd%2bUSANf3BxFGjh3YwRp4KOf5EgD761dQhp4a2UYaeBN/yDSwBvLA0gDry/2Iw28du07pIFXfb1IA6/M9SDtb7cMizY%2bH0Q1AAAAAElFTkSuQmCC' /%3e%3c/svg%3e"}}},"context":{}}